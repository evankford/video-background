/// <reference types="node" />
import Icons from './utils/icons';
import Player from "@vimeo/player";
export declare class VideoBackground extends HTMLElement {
    breakpoints?: number[];
    browserCanAutoPlay: boolean;
    container: HTMLElement;
    debug: {
        enabled: boolean;
        verbose: boolean;
    };
    iframe?: HTMLIFrameElement | null;
    can: VideoCan;
    observer?: IntersectionObserver;
    muteButton?: HTMLElement;
    overlayEl?: HTMLElement;
    oldSize?: number;
    pauseButton?: HTMLElement;
    player?: YoutubeAPIPlayer | Player;
    playerReady: boolean;
    isIntersecting: boolean;
    icons?: Icons;
    playerReadyTimeout?: NodeJS.Timeout;
    paused: boolean;
    muted: boolean;
    posterEl?: HTMLImageElement | HTMLPictureElement;
    scaleFactor: number;
    size?: string;
    startTime?: number;
    sourceId?: string;
    hasStarted: boolean;
    sources?: SourcesShape;
    sourcesReady: boolean;
    type?: 'local' | 'youtube' | 'vimeo' | 'error';
    url?: string;
    videoAspectRatio: number;
    videoCanAutoPlay: boolean;
    videoEl?: HTMLVideoElement;
    widthStore?: number;
    constructor();
    init(): void;
    buildDOM(): void;
    buildIcons(): void;
    buildVideo(): false | undefined;
    handleFallbackNoVideo(): void;
    initializeVideoAPI(): void;
    initializeVideoPlayer(): false | undefined;
    syncPlayer(): void;
    scaleVideo(scaleValue?: number): void;
    buildLocalVideo(): void;
    handlePlayCheck(): void;
    setPlayerReady(isReady?: boolean): void;
    toggleMute(): void;
    togglePause(): void;
    muteVideo(): void;
    unmuteVideo(): void;
    getSourcesFilteredBySize(sources: SourcesShape): SourcesShape;
    checkIfPassedBreakpoints(): void;
    checkForInherentPoster(): HTMLImageElement | HTMLPictureElement | false;
    buildPoster(): false | undefined;
    buildOverlay(): void;
    tryToPlay(): void;
    tryToPause(): void;
    buildIntersectionObserver(): void;
    handleIntersection(entries: IntersectionObserverEntry[], observer: IntersectionObserver): void;
    get autoplay(): boolean;
    get loop(): boolean;
    set autoplay(isAutoplay: boolean);
    set loop(isLoop: boolean);
    get mode(): "fit" | "fill";
    set mode(fitOrFill: "fit" | "fill");
    get status(): loadingStatus;
    set status(status: loadingStatus);
    get poster(): string | false;
    get posterSet(): string | false;
    get src(): string | null;
    set src(srcString: string | null);
    set poster(posterString: string | false);
    compileSources(srcString: string | null): false | undefined;
    cleanupSources(sources: SourcesShape): SourcesShape;
    prepareSingleSource(url: string, size?: number | false): LocalSource | Source;
    getFileType(url: string): FileType | false;
    handleMalformedSource(url: string): Source;
    getSourceType(url: string | null): SourceType;
    reset(): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    logger(msg: any, always?: boolean): "" | undefined;
}
